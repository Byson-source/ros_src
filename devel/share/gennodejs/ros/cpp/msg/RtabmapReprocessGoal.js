// Auto-generated. Do not edit!

// (in-package cpp.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class RtabmapReprocessGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.databasepaths = null;
      this.goal_path = null;
    }
    else {
      if (initObj.hasOwnProperty('databasepaths')) {
        this.databasepaths = initObj.databasepaths
      }
      else {
        this.databasepaths = [];
      }
      if (initObj.hasOwnProperty('goal_path')) {
        this.goal_path = initObj.goal_path
      }
      else {
        this.goal_path = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RtabmapReprocessGoal
    // Serialize message field [databasepaths]
    bufferOffset = _arraySerializer.string(obj.databasepaths, buffer, bufferOffset, null);
    // Serialize message field [goal_path]
    bufferOffset = _serializer.string(obj.goal_path, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RtabmapReprocessGoal
    let len;
    let data = new RtabmapReprocessGoal(null);
    // Deserialize message field [databasepaths]
    data.databasepaths = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [goal_path]
    data.goal_path = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.databasepaths.forEach((val) => {
      length += 4 + _getByteLength(val);
    });
    length += _getByteLength(object.goal_path);
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cpp/RtabmapReprocessGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e6b31abfb6499b91347d6e40d9d2808c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    string[] databasepaths
    string goal_path
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RtabmapReprocessGoal(null);
    if (msg.databasepaths !== undefined) {
      resolved.databasepaths = msg.databasepaths;
    }
    else {
      resolved.databasepaths = []
    }

    if (msg.goal_path !== undefined) {
      resolved.goal_path = msg.goal_path;
    }
    else {
      resolved.goal_path = ''
    }

    return resolved;
    }
};

module.exports = RtabmapReprocessGoal;
