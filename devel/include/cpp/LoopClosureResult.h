// Generated by gencpp from file cpp/LoopClosureResult.msg
// DO NOT EDIT!


#ifndef CPP_MESSAGE_LOOPCLOSURERESULT_H
#define CPP_MESSAGE_LOOPCLOSURERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cpp
{
template <class ContainerAllocator>
struct LoopClosureResult_
{
  typedef LoopClosureResult_<ContainerAllocator> Type;

  LoopClosureResult_()
    : result(false)  {
    }
  LoopClosureResult_(const ContainerAllocator& _alloc)
    : result(false)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::cpp::LoopClosureResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cpp::LoopClosureResult_<ContainerAllocator> const> ConstPtr;

}; // struct LoopClosureResult_

typedef ::cpp::LoopClosureResult_<std::allocator<void> > LoopClosureResult;

typedef boost::shared_ptr< ::cpp::LoopClosureResult > LoopClosureResultPtr;
typedef boost::shared_ptr< ::cpp::LoopClosureResult const> LoopClosureResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cpp::LoopClosureResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cpp::LoopClosureResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cpp::LoopClosureResult_<ContainerAllocator1> & lhs, const ::cpp::LoopClosureResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cpp::LoopClosureResult_<ContainerAllocator1> & lhs, const ::cpp::LoopClosureResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cpp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cpp::LoopClosureResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpp::LoopClosureResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpp::LoopClosureResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpp::LoopClosureResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpp::LoopClosureResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpp::LoopClosureResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cpp::LoopClosureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const ::cpp::LoopClosureResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cpp::LoopClosureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cpp/LoopClosureResult";
  }

  static const char* value(const ::cpp::LoopClosureResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cpp::LoopClosureResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"bool result\n"
;
  }

  static const char* value(const ::cpp::LoopClosureResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cpp::LoopClosureResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoopClosureResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cpp::LoopClosureResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cpp::LoopClosureResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CPP_MESSAGE_LOOPCLOSURERESULT_H
