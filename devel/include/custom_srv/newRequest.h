// Generated by gencpp from file custom_srv/newRequest.msg
// DO NOT EDIT!


#ifndef CUSTOM_SRV_MESSAGE_NEWREQUEST_H
#define CUSTOM_SRV_MESSAGE_NEWREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_srv
{
template <class ContainerAllocator>
struct newRequest_
{
  typedef newRequest_<ContainerAllocator> Type;

  newRequest_()
    : name1()
    , name2()  {
    }
  newRequest_(const ContainerAllocator& _alloc)
    : name1(_alloc)
    , name2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name1_type;
  _name1_type name1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name2_type;
  _name2_type name2;





  typedef boost::shared_ptr< ::custom_srv::newRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_srv::newRequest_<ContainerAllocator> const> ConstPtr;

}; // struct newRequest_

typedef ::custom_srv::newRequest_<std::allocator<void> > newRequest;

typedef boost::shared_ptr< ::custom_srv::newRequest > newRequestPtr;
typedef boost::shared_ptr< ::custom_srv::newRequest const> newRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_srv::newRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_srv::newRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_srv::newRequest_<ContainerAllocator1> & lhs, const ::custom_srv::newRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name1 == rhs.name1 &&
    lhs.name2 == rhs.name2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_srv::newRequest_<ContainerAllocator1> & lhs, const ::custom_srv::newRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_srv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_srv::newRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_srv::newRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_srv::newRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_srv::newRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_srv::newRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_srv::newRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_srv::newRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a212a9dcf203631b136bbebfc520ad3c";
  }

  static const char* value(const ::custom_srv::newRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa212a9dcf203631bULL;
  static const uint64_t static_value2 = 0x136bbebfc520ad3cULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_srv::newRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_srv/newRequest";
  }

  static const char* value(const ::custom_srv::newRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_srv::newRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name1\n"
"string name2\n"
;
  }

  static const char* value(const ::custom_srv::newRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_srv::newRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name1);
      stream.next(m.name2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct newRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_srv::newRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_srv::newRequest_<ContainerAllocator>& v)
  {
    s << indent << "name1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name1);
    s << indent << "name2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SRV_MESSAGE_NEWREQUEST_H
