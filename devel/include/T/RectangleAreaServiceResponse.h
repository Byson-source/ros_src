// Generated by gencpp from file T/RectangleAreaServiceResponse.msg
// DO NOT EDIT!


#ifndef T_MESSAGE_RECTANGLEAREASERVICERESPONSE_H
#define T_MESSAGE_RECTANGLEAREASERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace T
{
template <class ContainerAllocator>
struct RectangleAreaServiceResponse_
{
  typedef RectangleAreaServiceResponse_<ContainerAllocator> Type;

  RectangleAreaServiceResponse_()
    : area(0.0)  {
    }
  RectangleAreaServiceResponse_(const ContainerAllocator& _alloc)
    : area(0.0)  {
  (void)_alloc;
    }



   typedef double _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::T::RectangleAreaServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::T::RectangleAreaServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RectangleAreaServiceResponse_

typedef ::T::RectangleAreaServiceResponse_<std::allocator<void> > RectangleAreaServiceResponse;

typedef boost::shared_ptr< ::T::RectangleAreaServiceResponse > RectangleAreaServiceResponsePtr;
typedef boost::shared_ptr< ::T::RectangleAreaServiceResponse const> RectangleAreaServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::T::RectangleAreaServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::T::RectangleAreaServiceResponse_<ContainerAllocator1> & lhs, const ::T::RectangleAreaServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::T::RectangleAreaServiceResponse_<ContainerAllocator1> & lhs, const ::T::RectangleAreaServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace T

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::T::RectangleAreaServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::T::RectangleAreaServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::T::RectangleAreaServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "502b7bd5115b3b4f57d03446f9208d12";
  }

  static const char* value(const ::T::RectangleAreaServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x502b7bd5115b3b4fULL;
  static const uint64_t static_value2 = 0x57d03446f9208d12ULL;
};

template<class ContainerAllocator>
struct DataType< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "T/RectangleAreaServiceResponse";
  }

  static const char* value(const ::T::RectangleAreaServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 area\n"
;
  }

  static const char* value(const ::T::RectangleAreaServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RectangleAreaServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::T::RectangleAreaServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::T::RectangleAreaServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "area: ";
    Printer<double>::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T_MESSAGE_RECTANGLEAREASERVICERESPONSE_H
