// Generated by gencpp from file rtabmap_ros/GetNodesInRadiusRequest.msg
// DO NOT EDIT!


#ifndef RTABMAP_ROS_MESSAGE_GETNODESINRADIUSREQUEST_H
#define RTABMAP_ROS_MESSAGE_GETNODESINRADIUSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rtabmap_ros
{
template <class ContainerAllocator>
struct GetNodesInRadiusRequest_
{
  typedef GetNodesInRadiusRequest_<ContainerAllocator> Type;

  GetNodesInRadiusRequest_()
    : node_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , radius(0.0)  {
    }
  GetNodesInRadiusRequest_(const ContainerAllocator& _alloc)
    : node_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _node_id_type;
  _node_id_type node_id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetNodesInRadiusRequest_

typedef ::rtabmap_ros::GetNodesInRadiusRequest_<std::allocator<void> > GetNodesInRadiusRequest;

typedef boost::shared_ptr< ::rtabmap_ros::GetNodesInRadiusRequest > GetNodesInRadiusRequestPtr;
typedef boost::shared_ptr< ::rtabmap_ros::GetNodesInRadiusRequest const> GetNodesInRadiusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator1> & lhs, const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node_id == rhs.node_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator1> & lhs, const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rtabmap_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64a1b52a555d02582cfbac564065c33c";
  }

  static const char* value(const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64a1b52a555d0258ULL;
  static const uint64_t static_value2 = 0x2cfbac564065c33cULL;
};

template<class ContainerAllocator>
struct DataType< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtabmap_ros/GetNodesInRadiusRequest";
  }

  static const char* value(const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"\n"
"# If target pose and node_id are all zeros, poses \n"
"# around the latest node in the graph are returned.\n"
"# If node_id is not zero, target pose is ignored.\n"
"\n"
"# Node id\n"
"int32 node_id\n"
"\n"
"# Target pose:\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"# Radius, <=0 means that RGBD/LocalRadius will be used\n"
"float32 radius\n"
"\n"
;
  }

  static const char* value(const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetNodesInRadiusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtabmap_ros::GetNodesInRadiusRequest_<ContainerAllocator>& v)
  {
    s << indent << "node_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTABMAP_ROS_MESSAGE_GETNODESINRADIUSREQUEST_H
